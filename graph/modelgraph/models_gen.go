// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package modelgraph

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Booking struct {
	ID              string      `json:"id" copier:"Id"`
	Reference       string      `json:"reference" copier:"Reference"`
	ClientReference string      `json:"clientReference" copier:"ClientReference"`
	TimeStart       time.Time   `json:"timeStart" copier:"TimeStart"`
	TimeEnd         time.Time   `json:"timeEnd" copier:"TimeEnd"`
	CustomerID      string      `json:"customerID" copier:"CustomerID"`
	Customer        *Customer   `json:"customer,omitempty" copier:"Customer"`
	CourseGolfID    string      `json:"courseGolfID" copier:"CourseGolfID"`
	CourseGolf      *CourseGolf `json:"courseGolf,omitempty" copier:"CourseGolf"`
	CaddyID         string      `json:"caddyID" copier:"CaddyID"`
	Caddy           *Caddy      `json:"caddy,omitempty" copier:"Caddy"`
	TotalNet        *float64    `json:"totalNet,omitempty" copier:"TotalNet"`
	PendingAmount   *int        `json:"pendingAmount,omitempty" copier:"PendingAmount"`
}

type BookingData struct {
	Data       []*Booking      `json:"data" copier:"Data"`
	Pagination *PaginationType `json:"pagination" copier:"Pagination"`
}

type BookingInput struct {
	Reference    string       `json:"reference" copier:"Reference"`
	TimeStart    time.Time    `json:"timeStart" copier:"TimeStart"`
	TimeEnd      time.Time    `json:"timeEnd" copier:"TimeEnd"`
	CustomerID   string       `json:"customerID" copier:"CustomerID"`
	CourseGolfID string       `json:"courseGolfID" copier:"CourseGolfID"`
	CaddyID      string       `json:"caddyID" copier:"CaddyID"`
	Remark       *string      `json:"remark,omitempty" copier:"Remark"`
	Language     LanguageEnum `json:"language" copier:"Language"`
}

type BookingsInput struct {
	Language   LanguageEnum     `json:"language" copier:"Language"`
	Pagination *PaginationInput `json:"pagination" copier:"Pagination"`
}

type Caddy struct {
	ID           *string   `json:"id,omitempty" copier:"Id"`
	Name         *string   `json:"name,omitempty" copier:"Name"`
	Location     *string   `json:"location,omitempty" copier:"Location"`
	Avialability *string   `json:"avialability,omitempty" copier:"Avialability"`
	Skill        []*string `json:"skill,omitempty" copier:"Skill"`
	Start        *int      `json:"start,omitempty" copier:"Start"`
	Description  *string   `json:"description,omitempty" copier:"Description"`
	Time         []*string `json:"time,omitempty" copier:"Time"`
	Cost         *float64  `json:"cost,omitempty" copier:"Cost"`
	Images       []*string `json:"images,omitempty" copier:"Images"`
}

type CaddyData struct {
	Data       []*Caddy        `json:"data" copier:"Data"`
	Pagination *PaginationType `json:"pagination" copier:"Pagination"`
}

type CaddyInput struct {
	ID           *string      `json:"id,omitempty" copier:"Id"`
	Name         string       `json:"name" copier:"Name"`
	Location     string       `json:"location" copier:"Location"`
	Avialability string       `json:"avialability" copier:"Avialability"`
	Skill        []string     `json:"skill,omitempty" copier:"Skill"`
	Start        int          `json:"start" copier:"Start"`
	Description  *string      `json:"description,omitempty" copier:"Description"`
	Time         []string     `json:"time,omitempty" copier:"Time"`
	Cost         float64      `json:"cost" copier:"Cost"`
	Images       []string     `json:"images,omitempty" copier:"Images"`
	Language     LanguageEnum `json:"language" copier:"Language"`
	IsActive     bool         `json:"isActive" copier:"IsActive"`
}

type CourseGolf struct {
	ID        string   `json:"id" copier:"Id"`
	Name      string   `json:"name" copier:"Name"`
	Images    []string `json:"images,omitempty" copier:"Images"`
	Available int      `json:"available" copier:"Available"`
	Location  string   `json:"location" copier:"Location"`
	Latitude  float64  `json:"latitude" copier:"Latitude"`
	Longitude float64  `json:"longitude" copier:"Longitude"`
	IsActive  bool     `json:"isActive" copier:"IsActive"`
}

type CourseGolfData struct {
	Data       []*CourseGolf   `json:"data" copier:"Data"`
	Pagination *PaginationType `json:"pagination" copier:"Pagination"`
}

type CourseGolfInput struct {
	ID        *string  `json:"id,omitempty" copier:"Id"`
	Name      string   `json:"name" copier:"Name"`
	Images    []string `json:"images,omitempty" copier:"Images"`
	Available int      `json:"available" copier:"Available"`
	Location  string   `json:"location" copier:"Location"`
	Latitude  float64  `json:"latitude" copier:"Latitude"`
	Longitude float64  `json:"longitude" copier:"Longitude"`
	IsActive  bool     `json:"isActive" copier:"IsActive"`
}

type Customer struct {
	ID     *string   `json:"id,omitempty" copier:"Id"`
	UserID *string   `json:"userID,omitempty" copier:"UserID"`
	Name   *string   `json:"name,omitempty" copier:"Name"`
	Images []*string `json:"images,omitempty" copier:"Images"`
}

type GetBookingInput struct {
	BookingReference *string      `json:"bookingReference,omitempty" copier:"BookingReference"`
	Language         LanguageEnum `json:"language" copier:"Language"`
}

type GetCaddyInput struct {
	Language LanguageEnum `json:"language" copier:"Language"`
	ID       *string      `json:"id,omitempty" copier:"Id"`
}

type GetCaddysInput struct {
	Language   LanguageEnum     `json:"language" copier:"Language"`
	Pagination *PaginationInput `json:"pagination" copier:"Pagination"`
}

type GetgetCourseGolfInput struct {
	Language LanguageEnum `json:"language" copier:"Language"`
	ID       *string      `json:"id,omitempty" copier:"Id"`
}

type GetgetCourseGolfsInput struct {
	Language   LanguageEnum     `json:"language" copier:"Language"`
	Pagination *PaginationInput `json:"pagination" copier:"Pagination"`
}

type PaginationInput struct {
	Page     int           `json:"page" copier:"Page"`
	Limit    int           `json:"limit" copier:"Limit"`
	OrderBy  *string       `json:"orderBy,omitempty" copier:"OrderBy"`
	Asc      *bool         `json:"asc,omitempty" copier:"Asc"`
	Leyword  []*string     `json:"leyword,omitempty" copier:"Leyword"`
	Language *LanguageEnum `json:"language,omitempty" copier:"Language"`
}

type PaginationType struct {
	Page  int `json:"page" copier:"Page"`
	Limit int `json:"limit" copier:"Limit"`
	Total int `json:"total" copier:"Total"`
}

type Payment struct {
	ID *string `json:"id,omitempty" copier:"Id"`
}

type LanguageEnum string

const (
	LanguageEnumTh LanguageEnum = "TH"
	LanguageEnumEn LanguageEnum = "EN"
)

var AllLanguageEnum = []LanguageEnum{
	LanguageEnumTh,
	LanguageEnumEn,
}

func (e LanguageEnum) IsValid() bool {
	switch e {
	case LanguageEnumTh, LanguageEnumEn:
		return true
	}
	return false
}

func (e LanguageEnum) String() string {
	return string(e)
}

func (e *LanguageEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LanguageEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LanguageEnum", str)
	}
	return nil
}

func (e LanguageEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
