package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"cadigo-api/graph/modelgraph"
	"context"
)

// Customer is the resolver for the customer field.
func (r *bookingResolver) Customer(ctx context.Context, obj *modelgraph.Booking) (*modelgraph.Customer, error) {
	return r.BookingHandler.Customer(ctx, obj)
}

// CourseGolf is the resolver for the courseGolf field.
func (r *bookingResolver) CourseGolf(ctx context.Context, obj *modelgraph.Booking) (*modelgraph.CourseGolf, error) {
	return r.BookingHandler.CourseGolf(ctx, obj)
}

// Caddy is the resolver for the caddy field.
func (r *bookingResolver) Caddy(ctx context.Context, obj *modelgraph.Booking) (*modelgraph.Caddy, error) {
	return r.BookingHandler.Caddy(ctx, obj)
}

// Booking is the resolver for the booking field.
func (r *mutationResolver) Booking(ctx context.Context, input modelgraph.BookingInput) (*modelgraph.Booking, error) {
	return r.BookingHandler.Booking(ctx, input)
}

// GetBooking is the resolver for the getBooking field.
func (r *queryResolver) GetBooking(ctx context.Context, input modelgraph.GetBookingInput) (*modelgraph.Booking, error) {
	return r.BookingHandler.GetBooking(ctx, input)
}

// GetBookings is the resolver for the getBookings field.
func (r *queryResolver) GetBookings(ctx context.Context, input modelgraph.BookingsInput) (*modelgraph.BookingData, error) {
	return r.BookingHandler.GetBookings(ctx, input)
}

// Booking returns BookingResolver implementation.
func (r *Resolver) Booking() BookingResolver { return &bookingResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type bookingResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
