package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"cadigo-api/graph/modelgraph"
	"context"
)

// PostMessage is the resolver for the postMessage field.
func (r *mutationResolver) PostMessage(ctx context.Context, user string, text string) (*modelgraph.Message, error) {
	return r.ChatHandler.PostMessage(ctx, user, text)
}

// Messages is the resolver for the messages field.
func (r *queryResolver) Messages(ctx context.Context) ([]*modelgraph.Message, error) {
	return r.ChatHandler.Messages(ctx)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]string, error) {
	return r.ChatHandler.Users(ctx)
}

// MessagePosted is the resolver for the messagePosted field.
func (r *subscriptionResolver) MessagePosted(ctx context.Context, user string) (<-chan *modelgraph.Message, error) {
	return r.ChatHandler.MessagePosted(ctx, user)
}

// UserJoined is the resolver for the userJoined field.
func (r *subscriptionResolver) UserJoined(ctx context.Context, user string) (<-chan string, error) {
	return r.ChatHandler.UserJoined(ctx, user)
}

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
