// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package modelgraph

import (
	"fmt"
	"io"
	"strconv"
)

type Booking struct {
	Reference             *string `json:"reference,omitempty"`
	CancellationReference *string `json:"cancellationReference,omitempty"`
	ClientReference       *string `json:"clientReference,omitempty"`
	CreationDate          *string `json:"creationDate,omitempty"`
	Status                *string `json:"status,omitempty"`
	CreationUser          *string `json:"creationUser,omitempty"`
	Remark                *string `json:"remark,omitempty"`
	TotalSellingRate      *int    `json:"totalSellingRate,omitempty"`
	TotalNet              *int    `json:"totalNet,omitempty"`
	PendingAmount         *int    `json:"pendingAmount,omitempty"`
}

type BookingData struct {
	Data       []*Booking      `json:"data"`
	Pagination *PaginationType `json:"pagination"`
}

type BookingInput struct {
	ClientReference *string      `json:"clientReference,omitempty"`
	Language        LanguageEnum `json:"language"`
}

type BookingsHistoryInput struct {
	Language   LanguageEnum     `json:"language"`
	Pagination *PaginationInput `json:"pagination"`
}

type Caddy struct {
	ID           *string   `json:"id,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Location     *string   `json:"location,omitempty"`
	Avialability *string   `json:"avialability,omitempty"`
	Skill        []*string `json:"skill,omitempty"`
	Start        *int      `json:"start,omitempty"`
	Desction     *string   `json:"desction,omitempty"`
	Time         []*string `json:"time,omitempty"`
	Cost         *float64  `json:"cost,omitempty"`
}

type CaddyData struct {
	Data       []*Caddy        `json:"data"`
	Pagination *PaginationType `json:"pagination"`
}

type CaddyInput struct {
	Name         *string   `json:"name,omitempty"`
	Location     *string   `json:"location,omitempty"`
	Avialability *string   `json:"avialability,omitempty"`
	Skill        []*string `json:"skill,omitempty"`
	Start        *int      `json:"start,omitempty"`
	Desction     *string   `json:"desction,omitempty"`
	Time         []*string `json:"time,omitempty"`
	Cost         *float64  `json:"cost,omitempty"`
}

type GetBookingInput struct {
	BookingReference *string      `json:"bookingReference,omitempty"`
	Language         LanguageEnum `json:"language"`
}

type GetCaddyInput struct {
	Language LanguageEnum `json:"language"`
	ID       *string      `json:"id,omitempty"`
}

type PaginationInput struct {
	Page     int     `json:"page"`
	PageSize int     `json:"pageSize"`
	OrderBy  *string `json:"orderBy,omitempty"`
}

type PaginationType struct {
	Page     int `json:"page"`
	PageSize int `json:"pageSize"`
	Total    int `json:"total"`
}

type GetCaddysInput struct {
	Language   LanguageEnum     `json:"language"`
	Pagination *PaginationInput `json:"pagination"`
}

type LanguageEnum string

const (
	LanguageEnumTai LanguageEnum = "TAI"
	LanguageEnumEng LanguageEnum = "ENG"
)

var AllLanguageEnum = []LanguageEnum{
	LanguageEnumTai,
	LanguageEnumEng,
}

func (e LanguageEnum) IsValid() bool {
	switch e {
	case LanguageEnumTai, LanguageEnumEng:
		return true
	}
	return false
}

func (e LanguageEnum) String() string {
	return string(e)
}

func (e *LanguageEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LanguageEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LanguageEnum", str)
	}
	return nil
}

func (e LanguageEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
